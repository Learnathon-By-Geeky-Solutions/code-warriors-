// Root plugins: Apply base plugins needed for task types/configuration
plugins {
    id 'java' // Needed for sourceSets access later? Can sometimes be removed.
    id 'jacoco' // <<< NEEDED in root for 'JacocoReport' type used in manual task def
    id 'org.sonarqube' version '4.4.1.3373'

    // Declare versions/plugins for subprojects, but don't apply them globally here
    id 'org.springframework.boot' version '3.4.1' apply false
    id 'io.spring.dependency-management' version '1.1.7' apply false
}

allprojects {
    group = 'com.meta'
    version = '0.0.1-SNAPSHOT'

    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco' // Apply JaCoCo to configure individual reports/exec files
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(21)
        }
    }

    jacoco {
        toolVersion = "0.8.11" // Consistent JaCoCo version
    }

    // Configuration for INDIVIDUAL subproject reports (generates test.exec)
    jacocoTestReport {
        dependsOn tasks.named('test') // Ensure tests run first for this subproject
        reports {
            xml.required = true // Needed for generating execution data
            html.required = true // Optional for individual reports
            csv.required = false

            // Explicitly set output locations with the new API
            html.outputLocation = layout.buildDirectory.dir('reports/jacoco/test/html')
            xml.outputLocation = layout.buildDirectory.file('reports/jacoco/test/jacocoTestReport.xml')
            csv.outputLocation = layout.buildDirectory.file('reports/jacoco/test/jacocoTestReport.csv')
        }
        // You can keep class exclusion logic here if it's specific to the subproject
    }

    test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport // CRITICAL: Ensure test.exec is generated after tests

        jvmArgs '--add-opens=java.base/java.lang=ALL-UNNAMED'
        jvmArgs '--add-opens=java.base/java.util=ALL-UNNAMED'
        systemProperty "mockito.mock.creation.default", "mock-maker-inline"
    }

    // Common dependencies for all subprojects
    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.flywaydb:flyway-core'
        implementation 'org.flywaydb:flyway-mysql'
        implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'
        // implementation 'org.springdoc:springdoc-openapi-starter-webmvc-api:2.7.0' // Usually UI includes API
        implementation 'org.modelmapper:modelmapper:3.1.1' // Updated version
        implementation 'io.github.cdimascio:java-dotenv:5.2.2'
        implementation 'org.keycloak:keycloak-core:24.0.4' // Updated version (check compatibility)
        implementation 'com.auth0:java-jwt:4.4.0'

        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        runtimeOnly 'com.mysql:mysql-connector-j:8.4.0' // Updated version

        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.springframework.boot:spring-boot-testcontainers'
        testImplementation 'io.rest-assured:rest-assured:5.4.0'
        testImplementation 'io.rest-assured:json-path:5.4.0'
        testImplementation 'io.rest-assured:xml-path:5.4.0'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

        // Testcontainers (managed by BOM)
        testImplementation 'org.testcontainers:testcontainers'
        testImplementation 'org.testcontainers:junit-jupiter'
        testImplementation 'org.testcontainers:mysql'
    }

    dependencyManagement {
        imports {
            // Using Spring Boot's BOM usually covers Spring Cloud, check if explicit Cloud BOM is needed
            // mavenBom "org.springframework.cloud:spring-cloud-dependencies:2024.0.0" // Check Boot 3.4 compatibility
            mavenBom "org.testcontainers:testcontainers-bom:1.19.8" // Updated version
        }
    }
}

// === Manual JaCoCo Aggregate Report Configuration ===
def jacocoProjects = subprojects.findAll { project ->
    // Include only projects that have the jacoco plugin applied
    project.plugins.hasPlugin('jacoco') && project.sourceSets.findByName('main') // Ensure project has java sources
}

task jacocoAggregateReport(type: JacocoReport) {
    group = 'verification'
    description = 'Generates an aggregate JaCoCo report for all covered subprojects (Manual Definition).'

    // Ensure all subproject tests run before aggregation
    dependsOn jacocoProjects.collect { it.tasks.named('test') }

    // Configure inputs by collecting from relevant subprojects
    // These .setFrom calls happen during the CONFIGURATION phase, which is correct.
    additionalSourceDirs.setFrom files(jacocoProjects.collect { it.sourceSets.main.allSource.srcDirs })
    sourceDirectories.setFrom files(jacocoProjects.collect { it.sourceSets.main.allSource.srcDirs })
    classDirectories.setFrom files(jacocoProjects.collect { it.sourceSets.main.output })

    // Collect execution data files safely during configuration.
    // The .filter { it.exists() } here will filter based on file existence *at configuration time*.
    // If test.exec files are generated later, this might still miss them initially,
    // but the dependsOn test should ensure they exist before this task *runs*.
    // Crucially, we don't modify this collection during the execution phase.
    executionData.setFrom files(jacocoProjects.collect {
        file("${it.buildDir}/jacoco/test.exec")
    }).filter { it.exists() }

    // Configure desired report outputs
    reports {
        xml.required = true // SonarCloud needs this
        html.required = true // Useful for developers
        csv.required = false

        // Explicitly set output locations for the aggregate report
        html.outputLocation = layout.buildDirectory.dir('reports/jacoco/aggregate/html')
        xml.outputLocation = layout.buildDirectory.file('reports/jacoco/aggregate/jacoco.xml') // Match Sonar path
        csv.outputLocation = layout.buildDirectory.file('reports/jacoco/aggregate/jacoco.csv')
    }

    // --- REMOVED doFirst block ---
    // The modification of executionData inside doFirst caused the error.
    // Input configuration must happen during Gradle's configuration phase.
}

// === SonarQube Configuration ===
sonarqube {
    properties {
        property "sonar.projectKey", "Learnathon-By-Geeky-Solutions_code-warriors-"
        property "sonar.organization", "learnathon-by-geeky-solutions"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.java.source", "21" // Ensure this matches your toolchain
        property "sonar.gradle.skipCompile", "true" // Rely on Gradle's build lifecycle

        // Point Sonar to the *manually generated* aggregate XML report path
        property "sonar.coverage.jacoco.xmlReportPaths", "${layout.buildDirectory.get().asFile}/reports/jacoco/aggregate/jacoco.xml"

        // Coverage exclusions (applied project-wide)
        property "sonar.coverage.exclusions", "**/config/**,**/exception/**,**/model/**,**/dto/**,**/*Application*"
    }
}

// === Task Dependencies ===

// Ensure the aggregate report is generated as part of the main verification step
tasks.named('check').configure {
    dependsOn tasks.named('jacocoAggregateReport')
}

// Ensure SonarQube analysis runs *after* the aggregate report is generated
tasks.named('sonarqube').configure {
    dependsOn tasks.named('jacocoAggregateReport')
    // Ensure tests from all subprojects have run before analysis
    mustRunAfter(subprojects.collect { it.tasks.withType(Test) })
}