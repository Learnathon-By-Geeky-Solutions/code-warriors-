plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.1'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
	id 'org.sonarqube' version '3.5.0.2730'
}

group = 'com.meta'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2024.0.0")
	set('testcontainersVersion', "1.19.7")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-mysql'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-api:2.7.0'
	implementation 'org.modelmapper:modelmapper:2.1.1'
	implementation 'io.github.cdimascio:java-dotenv:5.2.2'
	implementation 'org.keycloak:keycloak-core:22.0.1'
	implementation 'com.auth0:java-jwt:4.4.0'
	implementation 'org.springframework.cloud:spring-cloud-circuitbreaker-resilience4j'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j:8.0.33'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'org.springframework.cloud:spring-cloud-starter-contract-stub-runner'
	testImplementation 'io.rest-assured:rest-assured:5.4.0'
	testImplementation 'io.rest-assured:json-path:5.4.0'
	testImplementation 'io.rest-assured:xml-path:5.4.0'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	 testImplementation 'org.testcontainers:testcontainers:1.19.3'
    testImplementation 'org.testcontainers:junit-jupiter:1.19.3'
    testImplementation 'org.testcontainers:mysql:1.19.3'
}

jacoco {
	toolVersion = "0.8.11"  // Updated to latest version
}

// ✅ JaCoCo test report configuration
jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		html.required = false
		csv.required = false
	}

	// Add exclusions for problematic classes
	afterEvaluate {
		classDirectories.setFrom(
				files(classDirectories.files.collect {
					fileTree(dir: it, excludes: [
							// Exclude model, config, exception and dto classes
							'**/config/**',
							'**/exception/**',
							'**/model/**',
							'**/dto/**',
							'**/entity/**',
							// Exclude problematic JDK internal classes
							'jdk/**',
							'sun/**',
							'com/sun/**',
							'java/**'
					])
				})
		)
	}
}

// ✅ SonarQube (SonarCloud) configuration
sonarqube {
	properties {
		property "sonar.projectKey", "Learnathon-By-Geeky-Solutions_code-warriors-"
		property "sonar.organization", "Learnathon-By-Geeky-Solutions"
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.login", System.getenv("SONAR_TOKEN")
		property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
		// Exclude certain files from analysis
		property "sonar.exclusions", "**/config/**, **/exception/**, **/model/**, **/dto/**, **/entity/**"
	}
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport

	// Add JVM args to help with Mockito and reflection issues
	jvmArgs '--add-opens=java.base/java.lang=ALL-UNNAMED'
	jvmArgs '--add-opens=java.base/java.util=ALL-UNNAMED'
	systemProperty "mockito.mock.creation.default", "mock-maker-inline"
}