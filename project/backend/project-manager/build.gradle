plugins {
	id 'java'
	// Consider using a released Spring Boot version (e.g., 3.3.0 or 3.2.6) unless you specifically need 3.4.1 features
	id 'org.springframework.boot' version '3.4.1'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco' // Ensure JaCoCo plugin is applied
	// Use a more recent SonarQube plugin version if possible (e.g., 4.4.1.3373)
	id 'org.sonarqube' version '4.4.1.3373' // Updated plugin version
}

group = 'com.meta' // Adjust if this service has a different group
version = '0.0.1-SNAPSHOT' // Adjust if needed

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

// Lombok configuration scope
configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools' // Optional: for local development
	runtimeOnly 'com.mysql:mysql-connector-j' // Or the specific DB connector you use
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	// Testcontainers
	testImplementation 'org.testcontainers:testcontainers:1.19.7'
	testImplementation 'org.testcontainers:junit-jupiter:1.19.7'
	testImplementation 'org.testcontainers:mysql:1.19.7'

	// Spring Boot Testcontainers integration
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	// testRuntimeOnly 'org.junit.platform:junit-platform-launcher' // Usually included via spring-boot-starter-test
}

jacoco {
	toolVersion = "0.8.11" // Updated JaCoCo version for consistency
}

// ✅ JaCoCo test report configuration
jacocoTestReport {
	dependsOn test // Ensures tests run before reports are generated
	reports {
		xml.required = true  // Required for SonarCloud
		html.required = false // Disable HTML report if not needed
		csv.required = false  // Disable CSV report if not needed
	}
	// Define class/package exclusions for coverage report
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, excludes: [
					'**/config/**',       // Configuration classes
					'**/exception/**',    // Custom exception classes
					'**/model/**',       // Data models / entities (often simple structures) - adjust if they have logic
					'**/dto/**',         // Data transfer objects
					'**/Application*',    // Main application class
					// Add any other packages/classes specific to this service to exclude
			])
		}))
	}
}

// ✅ SonarQube (SonarCloud) configuration
sonarqube {
	properties {
		property "sonar.projectKey", "Learnathon-By-Geeky-Solutions_code-warriors-" // CHANGE THIS if this service is a *separate* project in SonarCloud
		property "sonar.organization", "learnathon-by-geeky-solutions" // Corrected org name based on previous example
		property "sonar.host.url", "https://sonarcloud.io"
		// Remove sonar.login - Pass token via command line arg in CI (-Dsonar.login=...)
		// property "sonar.login", System.getenv("SONAR_TOKEN") // Avoid this here

		// Define coverage exclusions for SonarCloud reporting (mirror JaCoCo or adjust)
		property "sonar.coverage.exclusions", "**/config/**,**/exception/**,**/model/**,**/dto/**,**/Application*"

		// Explicitly setting this is often redundant if JaCoCo plugin is applied correctly, but doesn't hurt
		property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"

		// Other properties like sonar.sources, sonar.java.binaries are usually inferred correctly
	}
}

// ✅ Test task configuration
tasks.named('test', Test) { // Specify Test type
	useJUnitPlatform()
	// Add JVM args consistent with other services if needed for testing environment/libraries
	jvmArgs '--add-opens=java.base/java.lang=ALL-UNNAMED'
	jvmArgs '--add-opens=java.base/java.util=ALL-UNNAMED'
	systemProperty "mockito.mock.creation.default", "mock-maker-inline" // If using Mockito inline mocking

	finalizedBy jacocoTestReport // Hook JaCoCo report generation to run after tests finish
}

// Removed the custom print task as it's not needed for the final SonarCloud setup
// task printRuntimeClasspath { ... }