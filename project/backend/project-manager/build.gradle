import org.springframework.boot.gradle.plugin.SpringBootPlugin

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.1'
	id("org.graalvm.buildtools.native") version "0.10.6"
	id 'jacoco'
	id 'org.sonarqube' version '4.4.1.3373'
}
ext { // Optional but good practice: define version in one place
	lombokVersion = '1.18.32' // Or choose another recent stable version
}

group = 'com.meta'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}




configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}



dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'io.micrometer:micrometer-registry-prometheus'


	compileOnly "org.projectlombok:lombok:${lombokVersion}"
	annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

	runtimeOnly 'com.mysql:mysql-connector-j'
	developmentOnly 'org.springframework.boot:spring-boot-devtools:3.2.5'


	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.testcontainers:testcontainers:1.19.7'
	testImplementation 'org.testcontainers:junit-jupiter:1.19.7'
	testImplementation 'org.testcontainers:mysql:1.19.7'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'

	implementation(platform(SpringBootPlugin.BOM_COORDINATES))
	implementation(platform("io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom:2.15.0"))

	implementation("io.opentelemetry.instrumentation:opentelemetry-spring-boot-starter")
	implementation("io.opentelemetry:opentelemetry-api")
	implementation("io.opentelemetry:opentelemetry-sdk")
	implementation("io.opentelemetry:opentelemetry-exporter-zipkin")
	implementation("io.opentelemetry:opentelemetry-exporter-logging")
	implementation("io.opentelemetry.semconv:opentelemetry-semconv")

	runtimeOnly("io.opentelemetry.instrumentation:opentelemetry-micrometer-1.5:2.15.0-alpha")

	implementation("io.micrometer:micrometer-registry-prometheus:1.15.0-RC1")

	implementation("io.opentelemetry.contrib:opentelemetry-samplers:1.46.0-alpha")

	implementation("io.opentelemetry.contrib:opentelemetry-samplers:1.46.0-alpha")



}

jacoco {
	toolVersion = "0.8.11"
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		html.required = false
		csv.required = false
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, excludes: [
					'**/config/**',
					'**/exception/**',
					'**/model/**',
					'**/dto/**',
					'**/Application*',
			])
		}))
	}
}

sonarqube {
	properties {
		property "sonar.projectKey", "Learnathon-By-Geeky-Solutions_code-warriors-"
		property "sonar.organization", "learnathon-by-geeky-solutions"
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.coverage.exclusions", "**/config/**,**/exception/**,**/model/**,**/dto/**,**/Application*"
		property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
	}
}

tasks.named('test', Test) {
	useJUnitPlatform()
	jvmArgs '--add-opens=java.base/java.lang=ALL-UNNAMED'
	jvmArgs '--add-opens=java.base/java.util=ALL-UNNAMED'
	systemProperty "mockito.mock.creation.default", "mock-maker-inline"
	finalizedBy jacocoTestReport
}