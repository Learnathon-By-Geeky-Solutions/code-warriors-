["MetaHive: Virtual Workspace\nTeam Code Warriors\nNafis Fuad Shahid\nMD Saidur Rahman Sagor\nMd Abdul Muqtadir\nJanuary 17, 2025\nContents\n1\nMetaHive\n3\n2\nFrontend Technical Documentation\n3\n2.1\n2D Map and Avatar Navigation . . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", "3\n2.2\nDocument Collaboration . . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . 3\n2.3\nProximity-Based Calls and Screen Sharing .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . 3\n2.4\nProctoring Interface\n. .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . 3\n2.5\nReal-Time Collaboration .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . 4\n3\nBackend Technical Documentation\n4\n3.1\nUser Service . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . 4\n3.2\nAPI Gateway .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . 4\n3.3\nProctoring Service\n.", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". 4\n3.4\nDocument Service\n. . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . 4\n3.5\nGame Server\n. .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . 5\n3.6\nOffice Service . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . 5\n4\nSystem Flow\n5\n2\n1. MetaHive\nMetaHive is a sophisticated virtual office platform designed to redefine remote work through an\nimmersive 2D virtual environment.", "By integrating real-time interactions, AI-driven productivity\ntools, and a microservices-based backend architecture, MetaHive fosters a collaborative workspace\nthat balances flexibility with accountability. This documentation provides an in-depth analysis of\nthe frontend and backend architecture, features, and the rationale behind the solution\u2019s design. 2. Frontend Technical Documentation\nThe frontend of MetaHive crafts an engaging, user-centered interface that powers the immersive\nvirtual office experience. Built with a combination of technologies like Next.js and Kaboom.js, it\nenables dynamic interactions, seamless communication, and efficient workflows.", "2.1 2D Map and Avatar Navigation\nWhy It Matters: Introducing spatial dynamics into a remote work environment bridges the gap\nbetween physical and virtual offices. This approach not only enhances immersion but also replicates\ninformal interactions crucial for team bonding, which traditional platforms often overlook. The interactive 2D map allows users to navigate a virtual office space as avatars. This setup\nreplicates the spatial dynamics of a physical office, fostering a sense of proximity among users. Proximity-based triggers initiate features like video calls and screen sharing.", "For instance, as\navatars approach one another, AgoraRTC seamlessly activates communication tools, creating an\norganic flow of interaction. Kaboom.js powers the game mechanics, ensuring responsive movement\nand interaction. 2.2 Document Collaboration\nMetaHive integrates a document management system in one of its sidebars that mimics Confluence,\nenabling hierarchical organization of work materials. The interface includes advanced tools like text\nformatting, grammar checks, and AI-assisted summarization to streamline collaboration. The AI-driven tools are designed to support users in creating high-quality outputs with minimal\neffort, reducing cognitive load and enhancing productivity.", "2.3 Proximity-Based Calls and Screen Sharing\nWhy It Matters: Automating communication initiation based on proximity fosters spontane-\nity, which is a hallmark of effective in-person collaboration. This innovation eliminates manual\ninteraction barriers, promoting natural workflows. Calls and screen sharing are triggered automatically based on avatar proximity. This approach\nemulates spontaneous in-office discussions, reducing barriers to collaboration. The synchronization between Kaboom.js for spatial logic and AgoraRTC for communication\nexemplifies the seamless interaction of frontend components.", "2.4 Proctoring Interface\nThe proctoring feature offers real-time accountability by displaying snapshots captured by the\nbackend\u2019s AI-driven monitoring system. Admins can review these logs to ensure compliance with\norganizational policies. 3\n2.5 Real-Time Collaboration\nIntegrated tools like Discord provide additional communication channels for informal discussions,\ncomplementing the platform\u2019s structured features. WebSocket technology ensures low-latency syn-\nchronization of user actions and updates. 3.", "Backend Technical Documentation\nThe backend of MetaHive employs a robust Spring Boot microservices architecture, ensuring scal-\nability, flexibility, and performance. It orchestrates critical functionalities such as user authenti-\ncation, document storage, real-time interactions, and AI-driven features. Additionally, the system\nintegrates a User Service to manage user roles and permissions seamlessly, enhancing the overall\ncohesiveness of the platform. 3.1 User Service\nManages user profiles, roles, and permissions, ensuring seamless authentication and access con-\ntrol throughout the platform. By centralizing user data, this service integrates smoothly with\nother microservices, particularly the Office Service and API Gateway, to maintain consistency and\nsecurity.", "Why It Matters: By handling complex role-based access control (RBAC) in collaboration\nwith Keycloak, the User Service eliminates potential bottlenecks in user management, enabling a\nstreamlined and secure user experience. 3.2 API Gateway\nAs the central point for request routing, the API Gateway ensures secure and efficient communi-\ncation between clients and backend services. By integrating with Keycloak for token validation, it\nmaintains consistent authentication practices while reducing redundancy across services. 3.3 Proctoring Service\nWhy It Matters: Ensures accountability in a distributed workforce without being overly intrusive. By intelligently identifying anomalies and securing evidence, it balances trust with oversight in a\nnovel way that surpasses conventional monitoring techniques.", "This service leverages OpenCV to detect user activity anomalies and log snapshots for adminis-\ntrative review. Its design prioritizes efficiency, ensuring accurate monitoring with minimal compu-\ntational overhead. 3.4 Document Service\nFacilitates structured document storage and collaboration with features like hierarchical organi-\nzation. Integrated AI tools further enhance productivity by automating tasks like summarization\nand tone adjustments. The Document Service communicates with the Office Service to ensure that\ndocuments are uniquely tied to their respective offices, maintaining logical consistency and isolation\nacross teams.", "4\n3.5 Game Server\nWhy It Matters: Acts as the real-time engine behind user interactions, enabling the seamless\nspatial logic necessary for the platform\u2019s unique features. Its contribution ensures a fluid, engaging,\nand responsive virtual workspace. The game server synchronizes user interactions within the virtual map using WebSocket connec-\ntions, ensuring real-time updates for features like proximity-based calls. It serves as the backbone\nfor maintaining the dynamic and responsive nature of the 2D environment. 3.6 Office Service\nHandles the creation and management of virtual offices, including team structures, role assignments,\nand permissions.", "This component ensures flexibility to accommodate diverse organizational needs. 4. System Flow\nFigure 1: Backend Architecture\nThe MetaHive system architecture is structured to ensure secure, efficient, and scalable opera-\ntions across its components. At the frontend, a Next.js application serves as the user interface,\ncommunicating with the backend through a centralized Spring Boot API Gateway. The API\nGateway acts as a middleware, routing requests to appropriate microservices and handling user\n5\nauthentication using Keycloak, which operates with OAuth2.", "During authentication, the fron-\ntend retrieves an access token from Keycloak and stores it in its cache. This token is subsequently\nincluded in all requests to the API Gateway, where it is validated before granting access to backend\nservices. The backend is built on a microservices architecture, with each service handling a specific\ndomain. The User Service manages user profiles, roles, and permissions. The Office Service\nhandles office-related data and operations, while the Document Service supports document edit-\ning and synchronization in real time.", "All microservices store their data in a remote MySQL\ndatabase, ensuring consistency and persistence. In addition, the Face Tracker service monitors\nuser presence and activity, primarily for proctoring and engagement tracking purposes. Real-time interactions are supported through several key components. The Game Server, uti-\nlizing WebSocket technology, enables real-time synchronization of user actions and interactions\nwithin the virtual environment. A room-wise chatbot, built with Firebase, facilitates group-\nspecific communication, while a Python-based chatbot provides enhanced conversational and sup-\nport capabilities.", "Integration with external platforms like Discord further extends communication\nand collaboration beyond the core system. To handle performance and scalability, the system employs load balancing and caching mech-\nanisms, ensuring smooth operation under varying workloads. Each microservice is designed to\noperate independently, maintaining a modular and easily maintainable structure. Overall, the ar-\nchitecture balances security, performance, and functionality, providing a clear and efficient\nfoundation for MetaHive\u2019s virtual office system. 6", "MetaHive: Virtual Workspace\nTeam Code Warriors\nNafis Fuad Shahid\nMD Saidur Rahman Sagor\nMd Abdul Muqtadir\nJanuary 17, 2025\nContents\n1\nMetaHive\n3\n2\nFrontend Technical Documentation\n3\n2.1\n2D Map and Avatar Navigation . . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", "3\n2.2\nDocument Collaboration . . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . 3\n2.3\nProximity-Based Calls and Screen Sharing .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . 3\n2.4\nProctoring Interface\n. .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . 3\n2.5\nReal-Time Collaboration .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . 4\n3\nBackend Technical Documentation\n4\n3.1\nUser Service . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . 4\n3.2\nAPI Gateway .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . 4\n3.3\nProctoring Service\n.", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". 4\n3.4\nDocument Service\n. . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . 4\n3.5\nGame Server\n. .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . 5\n3.6\nOffice Service . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . . .", ". . . 5\n4\nSystem Flow\n5\n2\n1. MetaHive\nMetaHive is a sophisticated virtual office platform designed to redefine remote work through an\nimmersive 2D virtual environment.", "By integrating real-time interactions, AI-driven productivity\ntools, and a microservices-based backend architecture, MetaHive fosters a collaborative workspace\nthat balances flexibility with accountability. This documentation provides an in-depth analysis of\nthe frontend and backend architecture, features, and the rationale behind the solution\u2019s design. 2. Frontend Technical Documentation\nThe frontend of MetaHive crafts an engaging, user-centered interface that powers the immersive\nvirtual office experience. Built with a combination of technologies like Next.js and Kaboom.js, it\nenables dynamic interactions, seamless communication, and efficient workflows.", "2.1 2D Map and Avatar Navigation\nWhy It Matters: Introducing spatial dynamics into a remote work environment bridges the gap\nbetween physical and virtual offices. This approach not only enhances immersion but also replicates\ninformal interactions crucial for team bonding, which traditional platforms often overlook. The interactive 2D map allows users to navigate a virtual office space as avatars. This setup\nreplicates the spatial dynamics of a physical office, fostering a sense of proximity among users. Proximity-based triggers initiate features like video calls and screen sharing.", "For instance, as\navatars approach one another, AgoraRTC seamlessly activates communication tools, creating an\norganic flow of interaction. Kaboom.js powers the game mechanics, ensuring responsive movement\nand interaction. 2.2 Document Collaboration\nMetaHive integrates a document management system in one of its sidebars that mimics Confluence,\nenabling hierarchical organization of work materials. The interface includes advanced tools like text\nformatting, grammar checks, and AI-assisted summarization to streamline collaboration. The AI-driven tools are designed to support users in creating high-quality outputs with minimal\neffort, reducing cognitive load and enhancing productivity.", "2.3 Proximity-Based Calls and Screen Sharing\nWhy It Matters: Automating communication initiation based on proximity fosters spontane-\nity, which is a hallmark of effective in-person collaboration. This innovation eliminates manual\ninteraction barriers, promoting natural workflows. Calls and screen sharing are triggered automatically based on avatar proximity. This approach\nemulates spontaneous in-office discussions, reducing barriers to collaboration. The synchronization between Kaboom.js for spatial logic and AgoraRTC for communication\nexemplifies the seamless interaction of frontend components.", "2.4 Proctoring Interface\nThe proctoring feature offers real-time accountability by displaying snapshots captured by the\nbackend\u2019s AI-driven monitoring system. Admins can review these logs to ensure compliance with\norganizational policies. 3\n2.5 Real-Time Collaboration\nIntegrated tools like Discord provide additional communication channels for informal discussions,\ncomplementing the platform\u2019s structured features. WebSocket technology ensures low-latency syn-\nchronization of user actions and updates. 3.", "Backend Technical Documentation\nThe backend of MetaHive employs a robust Spring Boot microservices architecture, ensuring scal-\nability, flexibility, and performance. It orchestrates critical functionalities such as user authenti-\ncation, document storage, real-time interactions, and AI-driven features. Additionally, the system\nintegrates a User Service to manage user roles and permissions seamlessly, enhancing the overall\ncohesiveness of the platform. 3.1 User Service\nManages user profiles, roles, and permissions, ensuring seamless authentication and access con-\ntrol throughout the platform. By centralizing user data, this service integrates smoothly with\nother microservices, particularly the Office Service and API Gateway, to maintain consistency and\nsecurity.", "Why It Matters: By handling complex role-based access control (RBAC) in collaboration\nwith Keycloak, the User Service eliminates potential bottlenecks in user management, enabling a\nstreamlined and secure user experience. 3.2 API Gateway\nAs the central point for request routing, the API Gateway ensures secure and efficient communi-\ncation between clients and backend services. By integrating with Keycloak for token validation, it\nmaintains consistent authentication practices while reducing redundancy across services. 3.3 Proctoring Service\nWhy It Matters: Ensures accountability in a distributed workforce without being overly intrusive. By intelligently identifying anomalies and securing evidence, it balances trust with oversight in a\nnovel way that surpasses conventional monitoring techniques.", "This service leverages OpenCV to detect user activity anomalies and log snapshots for adminis-\ntrative review. Its design prioritizes efficiency, ensuring accurate monitoring with minimal compu-\ntational overhead. 3.4 Document Service\nFacilitates structured document storage and collaboration with features like hierarchical organi-\nzation. Integrated AI tools further enhance productivity by automating tasks like summarization\nand tone adjustments. The Document Service communicates with the Office Service to ensure that\ndocuments are uniquely tied to their respective offices, maintaining logical consistency and isolation\nacross teams.", "4\n3.5 Game Server\nWhy It Matters: Acts as the real-time engine behind user interactions, enabling the seamless\nspatial logic necessary for the platform\u2019s unique features. Its contribution ensures a fluid, engaging,\nand responsive virtual workspace. The game server synchronizes user interactions within the virtual map using WebSocket connec-\ntions, ensuring real-time updates for features like proximity-based calls. It serves as the backbone\nfor maintaining the dynamic and responsive nature of the 2D environment. 3.6 Office Service\nHandles the creation and management of virtual offices, including team structures, role assignments,\nand permissions.", "This component ensures flexibility to accommodate diverse organizational needs. 4. System Flow\nFigure 1: Backend Architecture\nThe MetaHive system architecture is structured to ensure secure, efficient, and scalable opera-\ntions across its components. At the frontend, a Next.js application serves as the user interface,\ncommunicating with the backend through a centralized Spring Boot API Gateway. The API\nGateway acts as a middleware, routing requests to appropriate microservices and handling user\n5\nauthentication using Keycloak, which operates with OAuth2.", "During authentication, the fron-\ntend retrieves an access token from Keycloak and stores it in its cache. This token is subsequently\nincluded in all requests to the API Gateway, where it is validated before granting access to backend\nservices. The backend is built on a microservices architecture, with each service handling a specific\ndomain. The User Service manages user profiles, roles, and permissions. The Office Service\nhandles office-related data and operations, while the Document Service supports document edit-\ning and synchronization in real time.", "All microservices store their data in a remote MySQL\ndatabase, ensuring consistency and persistence. In addition, the Face Tracker service monitors\nuser presence and activity, primarily for proctoring and engagement tracking purposes. Real-time interactions are supported through several key components. The Game Server, uti-\nlizing WebSocket technology, enables real-time synchronization of user actions and interactions\nwithin the virtual environment. A room-wise chatbot, built with Firebase, facilitates group-\nspecific communication, while a Python-based chatbot provides enhanced conversational and sup-\nport capabilities.", "Integration with external platforms like Discord further extends communication\nand collaboration beyond the core system. To handle performance and scalability, the system employs load balancing and caching mech-\nanisms, ensuring smooth operation under varying workloads. Each microservice is designed to\noperate independently, maintaining a modular and easily maintainable structure. Overall, the ar-\nchitecture balances security, performance, and functionality, providing a clear and efficient\nfoundation for MetaHive\u2019s virtual office system. 6"]