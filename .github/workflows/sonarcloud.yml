name: SonarCloud Analysis
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build-and-analyze:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for SonarCloud branch analysis
      
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
      
      - name: Make all gradlew files executable
        run: |
          find project/backend -name "gradlew" -type f -exec chmod +x {} \;
      
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('project/backend/**/build.gradle', 'project/backend/**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle
      
      - name: Update JaCoCo configuration in build.gradle files
        run: |
          for dir in project/backend/*/; do
            if [ -f "$dir/build.gradle" ]; then
              echo "Updating JaCoCo config in $dir/build.gradle"
              # Backup the original file
              cp "$dir/build.gradle" "$dir/build.gradle.bak"
              
              # Update JaCoCo version in build.gradle if it exists
              sed -i 's/toolVersion = "0.8.8"/toolVersion = "0.8.11"/' "$dir/build.gradle"
              
              # Make sure the JaCoCo plugin is applied if not already
              if ! grep -q "apply plugin: 'jacoco'" "$dir/build.gradle"; then
                echo "apply plugin: 'jacoco'" >> "$dir/build.gradle"
              fi
              
              # Add or update JaCoCo test report configuration
              if grep -q "jacocoTestReport {" "$dir/build.gradle"; then
                # JaCoCo block exists, update it
                awk '
                /jacocoTestReport {/,/}/ {
                  if ($0 ~ /}/ && !found) {
                    print "    reports {";
                    print "        xml.required = true";
                    print "        csv.required = false";
                    print "        html.required = true";
                    print "    }";
                    print "    afterEvaluate {";
                    print "        classDirectories.setFrom(";
                    print "            files(classDirectories.files.collect {";
                    print "                fileTree(dir: it, excludes: [";
                    print "                    \"**/config/**\",";
                    print "                    \"**/exception/**\",";
                    print "                    \"**/model/**\",";
                    print "                    \"**/dto/**\",";
                    print "                    \"jdk/**\",";
                    print "                    \"sun/**\",";
                    print "                    \"com/sun/**\",";
                    print "                    \"java/**\"";
                    print "                ])";
                    print "            })";
                    print "        )";
                    print "    }";
                    found=1;
                  }
                  print;
                  next;
                }
                { print }
                ' "$dir/build.gradle.bak" > "$dir/build.gradle"
              else
                # JaCoCo block doesn't exist, add it
                cat >> "$dir/build.gradle" << EOF
                
jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
        html.required = true
    }
    afterEvaluate {
        classDirectories.setFrom(
            files(classDirectories.files.collect {
                fileTree(dir: it, excludes: [
                    "**/config/**",
                    "**/exception/**",
                    "**/model/**",
                    "**/dto/**",
                    "jdk/**",
                    "sun/**",
                    "com/sun/**",
                    "java/**"
                ])
            })
        )
    }
}

// Add test task dependencies to ensure JaCoCo data is generated
test {
    finalizedBy jacocoTestReport
}
EOF
              fi
              
              # Add JVM args to test task if needed
              if ! grep -q "jvmArgs '--add-opens" "$dir/build.gradle"; then
                sed -i '/test {/,/}/ s/finalizedBy jacocoTestReport/finalizedBy jacocoTestReport\n    jvmArgs '"'"'--add-opens=java.base\/java.lang=ALL-UNNAMED'"'"'\n    jvmArgs '"'"'--add-opens=java.base\/java.util=ALL-UNNAMED'"'"'\n    systemProperty "mockito.mock.creation.default", "mock-maker-inline"/' "$dir/build.gradle"
              fi
            fi
          done
      
      - name: Run Tests and Generate JaCoCo Reports
        run: |
          echo "Running tests and generating JaCoCo reports for all services in project/backend/"
          found_services=false
          
          for dir in project/backend/*/; do
            if [ -f "$dir/build.gradle" ] && [ -f "$dir/gradlew" ]; then
              found_services=true
              service_name=$(basename "$dir")
              echo "Processing service: $service_name"
              
              # Run test and generate reports explicitly
              (cd "$dir" && ./gradlew clean test jacocoTestReport --info) || {
                echo "WARNING: Tests or JaCoCo report generation for $service_name failed"
                # Continue with next service instead of failing immediately
              }
            fi
          done
          
          if [ "$found_services" = false ]; then
            echo "No microservices with build.gradle and gradlew found in project/backend/"
            exit 1
          fi
      
      - name: List generated JaCoCo reports and validate
        run: |
          echo "Checking for generated JaCoCo reports..."
          find project/backend -path "*/build/reports/jacoco/test/jacocoTestReport.xml" -ls
          
          # Check if any reports exist
          if [ -z "$(find project/backend -path "*/build/reports/jacoco/test/jacocoTestReport.xml")" ]; then
            echo "WARNING: No JaCoCo reports were generated. Coverage data will be missing!"
          fi
          
          # Check the content of reports
          for report in $(find project/backend -path "*/build/reports/jacoco/test/jacocoTestReport.xml"); do
            echo "Validating report: $report"
            if [ ! -s "$report" ]; then
              echo "WARNING: Report file $report is empty!"
            else
              echo "Report file $report is valid."
              # Display some basic info from the report
              grep -A 1 "<report" "$report" || echo "Could not find report tag in $report"
            fi
          done
      
      - name: Prepare SonarCloud parameters
        id: sonar-params
        run: |
          # Collect all the source directories without wildcards
          SOURCES=""
          TESTS=""
          BINARIES=""
          TEST_BINARIES=""
          JACOCO_REPORTS=""
          LIBRARIES=""
          
          # Add all JAR files from .gradle directory as libraries
          for jar in $(find ~/.gradle -name "*.jar"); do
            if [ -z "$LIBRARIES" ]; then
              LIBRARIES="$jar"
            else
              LIBRARIES="$LIBRARIES,$jar"
            fi
          done
          
          for dir in project/backend/*/; do
            service_name=$(basename "$dir")
            
            # Add sources
            if [ -d "$dir/src/main/java" ]; then
              if [ -z "$SOURCES" ]; then
                SOURCES="project/backend/$service_name/src/main/java"
              else
                SOURCES="$SOURCES,project/backend/$service_name/src/main/java"
              fi
            fi
            
            # Add tests
            if [ -d "$dir/src/test/java" ]; then
              if [ -z "$TESTS" ]; then
                TESTS="project/backend/$service_name/src/test/java"
              else
                TESTS="$TESTS,project/backend/$service_name/src/test/java"
              fi
            fi
            
            # Add binaries
            if [ -d "$dir/build/classes/java/main" ]; then
              if [ -z "$BINARIES" ]; then
                BINARIES="project/backend/$service_name/build/classes/java/main"
              else
                BINARIES="$BINARIES,project/backend/$service_name/build/classes/java/main"
              fi
            fi
            
            # Add test binaries
            if [ -d "$dir/build/classes/java/test" ]; then
              if [ -z "$TEST_BINARIES" ]; then
                TEST_BINARIES="project/backend/$service_name/build/classes/java/test"
              else
                TEST_BINARIES="$TEST_BINARIES,project/backend/$service_name/build/classes/java/test"
              fi
            fi
            
            # Add JaCoCo reports
            if [ -f "$dir/build/reports/jacoco/test/jacocoTestReport.xml" ]; then
              if [ -z "$JACOCO_REPORTS" ]; then
                JACOCO_REPORTS="project/backend/$service_name/build/reports/jacoco/test/jacocoTestReport.xml"
              else
                JACOCO_REPORTS="$JACOCO_REPORTS,project/backend/$service_name/build/reports/jacoco/test/jacocoTestReport.xml"
              fi
            fi
            
            # Add local libraries from each project
            for jar in $(find "$dir/build/libs" -name "*.jar" 2>/dev/null); do
              if [ -z "$LIBRARIES" ]; then
                LIBRARIES="$jar"
              else
                LIBRARIES="$LIBRARIES,$jar"
              fi
            done
          done
          
          echo "sources=$SOURCES" >> $GITHUB_OUTPUT
          echo "tests=$TESTS" >> $GITHUB_OUTPUT
          echo "binaries=$BINARIES" >> $GITHUB_OUTPUT
          echo "test_binaries=$TEST_BINARIES" >> $GITHUB_OUTPUT
          echo "jacoco_reports=$JACOCO_REPORTS" >> $GITHUB_OUTPUT
          echo "libraries=$LIBRARIES" >> $GITHUB_OUTPUT
      
      - name: SonarCloud Scan
        if: success() || failure()  # Run even if previous step failed
        uses: SonarSource/sonarcloud-github-action@v2.2.0
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=Learnathon-By-Geeky-Solutions_code-warriors
            -Dsonar.organization=learnathon-by-geeky-solutions
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.sources=${{ steps.sonar-params.outputs.sources }}
            -Dsonar.tests=${{ steps.sonar-params.outputs.tests }}
            -Dsonar.java.binaries=${{ steps.sonar-params.outputs.binaries }}
            -Dsonar.java.test.binaries=${{ steps.sonar-params.outputs.test_binaries }}
            -Dsonar.java.libraries=${{ steps.sonar-params.outputs.libraries }}
            -Dsonar.coverage.jacoco.xmlReportPaths=${{ steps.sonar-params.outputs.jacoco_reports }}
            -Dsonar.verbose=true
            -Dsonar.coverage.exclusions=**/model/**,**/dto/**,**/config/**,**/exception/**
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}