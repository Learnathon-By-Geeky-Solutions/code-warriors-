name: SonarCloud Analysis
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build-and-analyze:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for SonarCloud branch analysis
      
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
      
      - name: Make all gradlew files executable
        run: |
          find project/backend -name "gradlew" -type f -exec chmod +x {} \;
      
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('project/backend/**/build.gradle', 'project/backend/**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle
      
      - name: Update JaCoCo configuration in build.gradle files
        run: |
          for dir in project/backend/*/; do
            if [ -f "$dir/build.gradle" ]; then
              echo "Updating JaCoCo config in $dir/build.gradle"
              # Backup the original file
              cp "$dir/build.gradle" "$dir/build.gradle.bak"
              
              # Update JaCoCo version in build.gradle if it exists
              sed -i 's/toolVersion = "0.8.8"/toolVersion = "0.8.11"/' "$dir/build.gradle"
              
              # Add the exclusions to the jacocoTestReport block if not already present
              if ! grep -q "afterEvaluate" "$dir/build.gradle"; then
                # Find the end of jacocoTestReport block and add our exclusions
                awk '
                /jacocoTestReport {/,/}/ {
                  if ($0 ~ /}/ && !found) {
                    print "    afterEvaluate {";
                    print "        classDirectories.setFrom(";
                    print "            files(classDirectories.files.collect {";
                    print "                fileTree(dir: it, excludes: [";
                    print "                    \"**/config/**\",";
                    print "                    \"**/exception/**\",";
                    print "                    \"**/model/**\",";
                    print "                    \"**/dto/**\",";
                    print "                    \"jdk/**\",";
                    print "                    \"sun/**\",";
                    print "                    \"com/sun/**\",";
                    print "                    \"java/**\"";
                    print "                ])";
                    print "            })";
                    print "        )";
                    print "    }";
                    found=1;
                  }
                  print;
                  next;
                }
                { print }
                ' "$dir/build.gradle.bak" > "$dir/build.gradle"
              fi
              
              # Add JVM args to test task if needed
              if ! grep -q "jvmArgs '--add-opens" "$dir/build.gradle"; then
                sed -i '/tasks.named.test./,/}/ s/useJUnitPlatform()/useJUnitPlatform()\n    jvmArgs '"'"'--add-opens=java.base\/java.lang=ALL-UNNAMED'"'"'\n    jvmArgs '"'"'--add-opens=java.base\/java.util=ALL-UNNAMED'"'"'\n    systemProperty "mockito.mock.creation.default", "mock-maker-inline"/' "$dir/build.gradle"
              fi
            fi
          done
      
      - name: Run Tests and Generate JaCoCo Reports
        run: |
          echo "Running tests and generating JaCoCo reports for all services in project/backend/"
          found_services=false
          
          for dir in project/backend/*/; do
            if [ -f "$dir/build.gradle" ] && [ -f "$dir/gradlew" ]; then
              found_services=true
              service_name=$(basename "$dir")
              echo "Processing service: $service_name"
              
              (cd "$dir" && ./gradlew test jacocoTestReport --info) || {
                echo "WARNING: Tests or JaCoCo report generation for $service_name failed"
                # Continue with next service instead of failing immediately
              }
            fi
          done
          
          if [ "$found_services" = false ]; then
            echo "No microservices with build.gradle and gradlew found in project/backend/"
            exit 1
          fi
      
      - name: List generated JaCoCo reports
        run: |
          echo "Checking for generated JaCoCo reports..."
          find project/backend -path "*/build/reports/jacoco/test/jacocoTestReport.xml" -ls
      
      - name: SonarCloud Scan
        if: success() || failure()  # Run even if previous step failed
        uses: SonarSource/sonarcloud-github-action@v2.2.0
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=Learnathon-By-Geeky-Solutions_code-warriors
            -Dsonar.organization=learnathon-by-geeky-solutions
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.sources=project/backend/*/src/main/java
            -Dsonar.tests=project/backend/*/src/test/java
            -Dsonar.java.binaries=project/backend/*/build/classes/java/main
            -Dsonar.java.test.binaries=project/backend/*/build/classes/java/test
            -Dsonar.coverage.jacoco.xmlReportPaths=project/backend/*/build/reports/jacoco/test/jacocoTestReport.xml
            -Dsonar.verbose=true
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}